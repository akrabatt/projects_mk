/* ************************************************************************** */
/***************************************************************** */
#include <proc/p32mz1024efh100.h>
#include <xc.h>
#include <sys/attribs.h>    /* contains __ISR() Macros */

#ifdef __cplusplus
extern "C" {
#endif
#define EXAMPLE_CONSTANT 0

    int ExampleFunction(int param1, int param2);

#define SYS_CLK_FREQUENCY  (200000000ull)       // Fsys = 200 MHz
#define CPU_CLK_FREQUENCY  SYS_CLK_FREQUENCY/1  // Fcpu = 200 MHz
#define PB3_CLK_FREQUENCY SYS_CLK_FREQUENCY/12   // Fpb3 = 2 MHz

// LED_LD1 (RG6)
#define LED_LD1       	LATBbits.LATB6
#define TRIS_LED_LD1  	TRISBbits.TRISB6
#define LED_LD1_SET()   LATBSET = _LATB_LATB6_MASK;
#define LED_LD1_CLR()   LATBCLR = _LATB_LATB6_MASK;
#define LED_LD1_INV()   LATBINV = _LATB_LATB6_MASK;


   
#define  ENAB_TX1		PORTFbits.RF5 = 1	
#define  ENAB_RX1		PORTFbits.RF5 = 0	
#define  ENAB_TX4		PORTBbits.RB12 = 1
#define  ENAB_RX4		PORTBbits.RB12 = 0 

#define  OUT_SIZE				0xF0
#define  IN_SIZE				0xF0
#define  OUT_SIZE2				0xF0
#define  IN_SIZE1				0xF0
#define  INCAP_VOLUME			380    
    
#define  timeout1               55
#define  timeout4               55    
#define  timeout5               55  
    
//#define  U2_speed				115200
//#define  U4_speed				115200    
#define  frame_delay_1          PBCLK2_ / U1_speed * timeout1
#define  frame_delay_5          PBCLK2_ / U5_speed * timeout5    
#define  frame_delay_4          PBCLK2_ / U4_speed * timeout4
    
/////////////////		Modbus alowed areas 		//////////////////////////

#define  START_READ					2000			// ???????, ????????? ??? ?????? 
#define  END_READ					2078			// ???????, ????????? ??? ??????

#define  START_WRITE				2054			// ???????, ????????? ??? ?????? 
#define  END_WRITE					2078			// ???????, ????????? ??? ??????

#define  READ_				((start_reg>=START_READ)&&(last_reg<=END_READ))			// ??????? ?????? ????????? ?????
#define  WRITE_				((start_reg>=START_WRITE)&&(last_reg<=END_WRITE))		// ??????? ?????? ????????????
  

#define  START_WORK_READ				800			// ??????? ?????? ??????? ??????
#define  END_WORK_READ					812			// 
#define  START_WORK_WRITE				806			// ??????? ?????? ??????? ??????
#define  END_WORK_WRITE					812			// 

#define  WORK_READ_			((start_reg >= START_WORK_READ) && (last_reg <= END_WORK_READ))	
#define  WORK_WRITE_		((start_reg >= START_WORK_WRITE) && (last_reg <= END_WORK_WRITE))

#define  START_CALIBR_READ				1000			// ??????? ?????? ??????? ??????
#define  END_CALIBR_READ				1034			// 
#define  START_CALIBR_WRITE				1000			// ??????? ?????? ??????? ??????
#define  END_CALIBR_WRITE				1034			// 

#define  CALIBR_READ_		((start_reg >= START_CALIBR_READ) && (last_reg <= END_CALIBR_READ))	
#define  CALIBR_WRITE_		((start_reg >= START_CALIBR_WRITE) && (last_reg <= END_CALIBR_WRITE))


#define  START_CONF_READ				500			// config area - setting of engine parameters
#define  END_CONF_READ  				630			// 
#define  START_CONF_WRITE				500			//
#define  END_CONF_WRITE					630			// 

#define  CONF_READ_             ((start_reg >= START_CONF_READ) && (last_reg <= END_CONF_READ))	
#define  CONF_WRITE_            ((start_reg >= START_CONF_WRITE) && (last_reg <= END_CONF_WRITE))

#define  START_MODBUS_READ				0			// working area of engine control and statuses
#define  END_MODBUS_READ  				80			// 
#define  START_MODBUS_WRITE				0			//
#define  END_MODBUS_WRITE				8			// 

#define  MODBUS_READ_           ((start_reg >= START_MODBUS_READ) && (last_reg <= END_MODBUS_READ))	
#define  MODBUS_WRITE_          ((start_reg >= START_MODBUS_WRITE) && (last_reg <= END_MODBUS_WRITE))
    
#define  START_MB_DIAGN_READ				200			// config area - setting of engine parameters
#define  END_MB_DIAGN_READ  				270			// 
#define  START_MB_DIAGN_WRITE               200			//
#define  END_MB_DIAGN_WRITE                 270			// 

#define  MB_DIAGN_READ_           ((start_reg >= START_MB_DIAGN_READ) && (last_reg <= END_MB_DIAGN_READ))	
#define  MB_DIAGN_WRITE_          ((start_reg >= START_MB_DIAGN_WRITE) && (last_reg <= END_MB_DIAGN_WRITE))    
    
    
    
#define  RAMTRON_START              	64
#define  RAMTRON_START_CONFIG			512
    
#define  COORD_MAX			MB_conf.CV_pos_max
#define  COORD_MIN			MB_conf.CV_pos_min
#define  CUR_MAX			MB_conf.CV_curr_max
#define  CUR_MIN			MB_conf.CV_curr_min
#define  CUR_SCALE			MB_conf.CV_curr_scale
    
//#define  COORD_MAX			MB_calibr.pos_100
//#define  COORD_MIN			MB_calibr.pos_0
//#define  CUR_MAX			MB_calibr.curr_100
//#define  CUR_MIN			MB_calibr.curr_0
//#define  CUR_SCALE			MB_calibr.curr_scale    
#define  INT_CLR			0.0   

#define  OC_FREQ            3550    
#define  OC_MAX             PBCLK3_ / OC_FREQ -1
#define  OC_MIN             200

#define  FILT_CRPM          4
    
#define  FILT_C             10
#define  FILT_I             10

#define  TMAXUOZ            58320                  
    
    ////////////////	End Modbus alowed area 	/////////////////////

#define  STROBE		PORTBbits.RB6			// изменено для платы 606-хх
    
#define  LED_AO		PORTEbits.RE1			// изменено для платы 606-хх pin 94
#define  LED_AO_ON	PORTE = LATE | 0x0002		// изменено для платы 606-хх
#define  LED_AO_OFF	PORTE = LATE & 0xFFFD		// изменено для платы 606-хх

#define  LED_IGN	PORTGbits.RG12			// изменено для платы 606-хх pin 96
#define  LED_IGN_ON	PORTG = LATG | 0x1000		// изменено для платы 606-хх
#define  LED_IGN_OFF	PORTG = LATG & 0xEFFF		// изменено для платы 606-хх
    
#define  LED_STOP	PORTEbits.RE3			// изменено для платы 606-хх pin 99
#define  LED_STOP_ON	PORTE = LATE | 0x0008		// изменено для платы 606-хх
#define  LED_STOP_OFF	PORTE = LATE & 0xFFF7		// изменено для платы 606-хх    

#define  LED_SYNC	PORTEbits.RE2			// изменено для платы 606-хх pin 98
#define  LED_SYNC_ON	PORTE = LATE | 0x0004		// изменено для платы 606-хх
#define  LED_SYNC_OFF	PORTE = LATE & 0xFFFB		// изменено для платы 606-хх    

#define  LED_WIGN	PORTGbits.RG13			// изменено для платы 606-хх pin 97
#define  LED_WIGN_ON	PORTG = LATG | 0x2000		// изменено для платы 606-хх   
#define  LED_WIGN_OFF	PORTG = LATG & 0xDFFF		// изменено для платы 606-хх   

#define  LED_READY	PORTEbits.RE4			// изменено для платы 606-хх pin 100
#define  LED_READY_ON	PORTE = LATE | 0x0010		// изменено для платы 606-хх
#define  LED_READY_OFF	PORTE = LATE & 0xFFEF		// изменено для платы 606-хх        

#define  LED_PID	PORTGbits.RG14			// изменено для платы 606-хх pin 95
#define  LED_PID_ON	PORTG = LATG | 0x4000		// изменено для платы 606-хх   
#define  LED_PID_OFF	PORTG = LATG & 0xBFFF		// изменено для платы 606-хх   
    
#define  LED_FAIL	PORTEbits.RE0			// изменено для платы 606-хх pin 91
#define  LED_FAIL_ON	PORTE = LATE | 0x0001		// изменено для платы 606-хх
#define  LED_FAIL_OFF	PORTE = LATE & 0xFFFE		// изменено для платы 606-хх        
    
#define  LED9		PORTFbits.RF8			// изменено для платы 606-хх pin 58
#define  LED9_ON	PORTF = LATF | 0x0100		// изменено для платы 606-хх   
#define  LED9_OFF	PORTF = LATF & 0xFEFF		// изменено для платы 606-хх       
    
#define  LED10		PORTAbits.RA8			// изменено для платы 606-хх pin 59
#define  LED10_ON	PORTA = LATA | 0x0004		// изменено для платы 606-хх   
#define  LED10_OFF	PORTA = LATA & 0xFFFB		// изменено для платы 606-хх       


#define  DO_2		PORTAbits.RA3			// изменено для платы 606-хх pin 60
#define  DO_2_ON	PORTA = LATA | 0x0008		// изменено для платы 606-хх   
#define  DO_2_OFF	PORTA = LATA & 0xFFF7		// изменено для платы 606-хх       

#define  DO_1		PORTAbits.RA4			// изменено для платы 606-хх pin 61
#define  DO_1_ON	PORTA = LATA | 0x0010		// изменено для платы 606-хх   
#define  DO_1_OFF	PORTA = LATA & 0xFFEF		// изменено для платы 606-хх   

#define  IGN_ON		PORTDbits.RD5			// изменено для платы 606-хх pin 82

#define  TAP_ON		PORTDbits.RD15



#define  IGN_1      PORTDbits.RD9			// изменено для платы 606-хх pin 68
#define  IGN_2      PORTDbits.RD13			// изменено для платы 606-хх pin 80
#define  IGN_3      PORTDbits.RD3			// изменено для платы 606-хх pin 78
#define  IGN_4      PORTDbits.RD11			// изменено для платы 606-хх pin 70
#define  IGN_5      PORTDbits.RD12			// изменено для платы 606-хх pin 79
#define  IGN_6      PORTDbits.RD0			// изменено для платы 606-хх pin 71
#define  IGN_7      PORTDbits.RD4			// изменено для платы 606-хх pin 81
#define  IGN_8      PORTDbits.RD10			// изменено для платы 606-хх pin 69


#define  ON_IGN_1       PORTD |= 0x0200			// изменено для платы 606-хх pin 68
#define  ON_IGN_2       PORTD |= 0x2000			// изменено для платы 606-хх pin 80
#define  ON_IGN_3       PORTD |= 0x0008			// изменено для платы 606-хх pin 80
#define  ON_IGN_4       PORTD |= 0x0008
#define  ON_IGN_5       PORTD |= 0x0800
#define  ON_IGN_6       PORTD |= 0x1000
#define  ON_IGN_7       PORTD |= 0x0001
#define  ON_IGN_8       PORTD |= 0x2000
    
#define  IGN_RESET      PORTD &= 0xC1E6			// изменено для платы 606-хх
#define  MAX_CYL_NUM    8				// изменено для платы 606-хх


#define  CTRL1      PORTCbits.RC14			// изменено для платы 606-хх pin 73
#define  CTRL2      PORTDbits.RD1			// изменено для платы 606-хх pin 76
#define  CTRL3      PORTFbits.RF1			// изменено для платы 606-хх pin 86
#define  CTRL4      PORTGbits.RG0			// изменено для платы 606-хх pin 88

    
#define  CONF1      PORTCbits.RC2			// изменено для платы 606-хх pin 7 
#define  CONF2      PORTCbits.RC3			// изменено для платы 606-хх pin 8
#define  CONF3      PORTCbits.RC4			// изменено для платы 606-хх pin 9
#define  CONF4      PORTGbits.RG6			// изменено для платы 606-хх pin 10 
#define  CONF5      PORTEbits.RE5			// изменено для платы 606-хх pin 5
#define  CONF6      PORTEbits.RE6			// изменено для платы 606-хх pin 6 
#define  CONF7      PORTEbits.RE7			// изменено для платы 606-хх pin 7
#define  CONF8      PORTCbits.RC1			// изменено для платы 606-хх pin 6

#define  DINPUT1    PORTAbits.RA5 			// изменено для платы 606-хх pin 2
#define  DINPUT2    PORTGbits.RG15			// изменено для платы 606-хх pin 1
#define  DINPUT3    PORTFbits.RF4 			// изменено для платы 606-хх pin 64

//  Modbus data define
    
#define  FLAP_SET    Modbus.CV_set
#define  FLAP_POS    Modbus.CV_pos
#define  FLAP_CURR   Modbus.CV_current    

#define  RPM_UOZ_MIN    MB_conf.UOZ_RPM_min    
#define  RPM_UOZ_MAX    MB_conf.UOZ_RPM_max

#define  NOM_UOZ        MB_conf.UOZ_high
#define  LOW_UOZ        MB_conf.UOZ_low
#define  CONST_UOZ      MB_conf.constructive_UOZ



    int ExampleFunction(int param1, int param2);


    /* Provide C++ Compatibility */
#ifdef __cplusplus
}
#endif



/* *****************************************************************************
 End of File
 */




/* *****************************************************************************
 End of File
 */
